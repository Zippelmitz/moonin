#!/usr/bin/perl
#
#

use strict;
use warnings;

use FindBin;
use lib ("$FindBin::Bin/../lib");
use Parallel::ForkManager;
use Moonin::Config;
use Moonin::Node;
use Moonin::Graph;
use Log::Log4perl qw(:levels);

my $conf = q(
log4perl.rootLogger=INFO, Screen
log4perl.appender.Screen=Log::Log4perl::Appender::Screen
log4perl.appender.Screen.layout=Log::Log4perl::Layout::PatternLayout
log4perl.appender.Screen.stderr=0
log4perl.appender.Screen.layout.ConversionPattern=[%d] [%C (%L)] [%p] %m%n
            );
Log::Log4perl::init( \$conf );

my $config =
  Moonin::Config->new( config_file => "$FindBin::Bin/../conf/moonin.conf" );

my $pm = Parallel::ForkManager(50);
my @dispatch = ();
my $big_logger = Log::Log4perl->get_logger("Moonin");
foreach my $domain_name ( keys( %{ $config->domain } ) ) {
  foreach
    my $node_name ( keys( %{ $config->domain->{$domain_name}->{node} } ) ) {
    $big_logger->debug("Adding $domain_name, $node_name to dispatch list");
    push(@dispatch, [ $domain_name, $node_name ]);
  }
}


foreach my $client (@dispatch) {
  my $pid = $pm->start and next;
  &dispatch($client[0], $client[1]);
  $pm->finish;
}
$pm->wait_all_children;


$cron->add_entry( "*/8 * * * *", \&graph );
$big_logger->info("Starting Moonin Poller");
if (defined($ARGV[0]) && $ARGV[0] eq "graph") {
  &graph;
} else {
  $cron->run;
}

exit 0;

sub log_method {
  my ( $level, $msg ) = @_;
  my $DBG_MAP = { 0 => $INFO, 1 => $WARN, 2 => $ERROR };

  my $logger = Log::Log4perl->get_logger("Moonin");
  $logger->log( $DBG_MAP->{$level}, $msg );
}

# First, poll the nodes
sub dispatch {
  my ( $domain_name, $node_name, $type ) = @_;

  my $node = Moonin::Node->new(
    domain => $domain_name,
    name   => $node_name,
    config => $config,
  );

  my $logger = Log::Log4perl->get_logger("Moonin");
  $logger->info("Fetching node $domain_name $node_name");
  $node->process;
}

# Optionally, graph the results
sub graph {
  my $logger = Log::Log4perl->get_logger("Moonin");
  foreach my $domain ( keys( %{ $config->domain } ) ) {
    foreach my $node_name ( keys( %{ $config->domain->{$domain}->{node} } ) ) {
      $logger->info("Pre-Processing graphs for $domain $node_name");
      my $node = Moonin::Node->new(
        domain => $domain,
        name   => $node_name,
        config => $config,
      );
      my $graph = Moonin::Graph->new( node => $node );
      $graph->pre_process_all;
    }
  }
}

1;
